package it.unibo.balatrolt.view.impl;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.io.IOException;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;

/**
 * Creates the part of the GUI containing the
 * slots for the cards (any type).
 */
public final class SlotGUI extends JPanel {
    private static final float BASE_WEIGHT = 0.2f;
    private static final int RIDIM = 28;
    private static final int NUM_SPECIAL_SLOT = 2; //this number will be generated by the model.
    private static final int NUM_CARD_SLOT = 7; //this number will be generated by the model.
    private final int numHandSlot = 2; //this number will be generated by the model.

    /**
     * Sets the controller and the number of
     * hand and special card slot.
     */
    public SlotGUI(List<String> cards) throws IOException {
        super(new GridBagLayout());
        this.setBackground(Color.green.darker().darker().darker());

        updateSpecialSlot();
        updateCardSlot();
        updateHand(cards);
    }

    /**
     * Updates the hand slot with the new cards.
     * @param hand the new cards to show.
     */
    public void updateHand(List<String> hand) {
        buildHandSlot(hand, numHandSlot);
    }

    /**
     * Updates the special slot with the new cards.
     */
    public void updateSpecialSlot() {
        buildSpecialSlot();
    }

    /**
     * Updates the card slot with the new cards.
     */
    public void updateCardSlot() {
        buildCardSlot();
    }

    /**
     * Builds the special slot.
     */
    private void buildSpecialSlot() {
        final JPanel speciaSlot = new JPanel(new GridLayout(1, NUM_SPECIAL_SLOT));
        final GridBagConstraints gbc = new GridBagConstraints();

        for (int i = 0; i < NUM_SPECIAL_SLOT; i++) {
            final JButton card = new JButton();
            try {
                final Image img = ImageIO.read(getClass().getResource("/ACESPADES.png"));
                card.setIcon(new ImageIcon(img));
                speciaSlot.add(card);
            } catch (IOException e) {
                throw new ExceptionInInitializerError(e);
            }
        }
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = BASE_WEIGHT;
        gbc.weighty = BASE_WEIGHT;
        gbc.insets = new Insets(RIDIM, RIDIM, RIDIM, RIDIM);
        gbc.anchor = GridBagConstraints.FIRST_LINE_END;
        this.add(speciaSlot, gbc);
    }

    /**
     * Builds the card slot.
     */
    private void buildCardSlot() {
        final JPanel cardSlot = new JPanel(new GridLayout(1, NUM_CARD_SLOT));
        final GridBagConstraints gbc = new GridBagConstraints();

        for (int i = 0; i < NUM_CARD_SLOT; i++) {
            final JButton card = new JButton();
            card.setBackground(getBackground());
            try {
                final Image img = ImageIO.read(getClass().getResource("/TWOHEARTS.png"));
                card.setIcon(new ImageIcon(img));
                cardSlot.add(card);
            } catch (IOException e) {
                throw new ExceptionInInitializerError(e);
            }
        }
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = BASE_WEIGHT;
        gbc.weighty = BASE_WEIGHT;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(0, RIDIM, RIDIM, RIDIM);
        gbc.anchor = GridBagConstraints.CENTER;
        this.add(cardSlot, gbc);
    }

    /**
     * Builds the hand slot.
     * @param hand the cards to show.
     * @param numHandSlot the number of hand slot.
     */
    private void buildHandSlot(List<String> hand, int numHandSlot) {
        final JPanel handSlot = new JPanel(new GridLayout(1, numHandSlot));
        final GridBagConstraints gbc = new GridBagConstraints();

        for (final String cardName : hand) {
            final JButton card = new JButton();
            try {
                final Image img = ImageIO.read(getClass().getResource("/" + cardName + ".png"));
                card.setIcon(new ImageIcon(img));
                handSlot.add(card);
            } catch (IOException e) {
                throw new ExceptionInInitializerError(e);
            }
        }
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = BASE_WEIGHT;
        gbc.weighty = BASE_WEIGHT;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(0, RIDIM, RIDIM, RIDIM);
        gbc.anchor = GridBagConstraints.PAGE_END;
        this.add(handSlot, gbc);
    }
}

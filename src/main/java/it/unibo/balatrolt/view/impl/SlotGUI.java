package it.unibo.balatrolt.view.impl;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;

import it.unibo.balatrolt.controller.api.HandController;
import it.unibo.balatrolt.controller.impl.HandControllerImpl;

/**
 * Creates the part of the GUI containing the
 * slots for the cards (any type).
 */
public final class SlotGUI {
    private final HandController handController;
    private static final int NUM_JOKER_SLOT = 5; //this number will be generated by the model.
    private static final int NUM_SPECIAL_SLOT = 2; //this number will be generated by the model.
    private static final int NUM_CARD_SLOT = 7; //this number will be generated by the model.
    private final int NUM_HAND_SLOT;
    private static final int RIDIM = 28;

    public SlotGUI() {
        this.handController = new HandControllerImpl();
        this.NUM_HAND_SLOT = handController.numHandSlot();
    }

    /**
     * @return the completed slot GUI.
     *
     * @throws IOException
     */
    JPanel build(Dimension dim) throws IOException {
        final JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(Color.green.darker().darker().darker());

        buildJokerSlot(panel, dim);
        buildSpecialSlot(panel, dim);
        buildCardSlot(panel, dim);
        buildHandSlot(panel, dim);
        return panel;
    }

    private final void buildJokerSlot(final JPanel panel, final Dimension dim) {
        final JPanel jokerSlot = new JPanel(new GridLayout(1,NUM_JOKER_SLOT));
        GridBagConstraints gbc = new GridBagConstraints();

        for (int i = 0; i < NUM_JOKER_SLOT; i++) {
            final JButton card = new JButton();
            try {
                final Image img = ImageIO.read(getClass().getResource("/TWOHEARTS.png"));
                card.setIcon(new ImageIcon(img));
                jokerSlot.add(card);
            } catch (IOException e) {
                throw new ExceptionInInitializerError(e);
            }
        }
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.2;
        gbc.weighty = 0.2;
        gbc.insets = new Insets((int)dim.getHeight() / RIDIM, (int)dim.getWidth() / RIDIM, RIDIM, RIDIM);
        gbc.anchor = GridBagConstraints.FIRST_LINE_START;
        panel.add(jokerSlot, gbc);
    }

    private final void buildSpecialSlot(final JPanel panel, final Dimension dim) {
        final JPanel speciaSlot = new JPanel(new GridLayout(1, NUM_SPECIAL_SLOT));
        GridBagConstraints gbc = new GridBagConstraints();

        for (int i = 0; i < NUM_SPECIAL_SLOT; i++) {
            final JButton card = new JButton();
            try {
                final Image img = ImageIO.read(getClass().getResource("/ACESPADES.png"));
                card.setIcon(new ImageIcon(img));
                speciaSlot.add(card);
            } catch (IOException e) {
                throw new ExceptionInInitializerError(e);
            }
        }
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 0.2;
        gbc.weighty = 0.2;
        gbc.insets = new Insets((int)dim.getHeight() / RIDIM, RIDIM, RIDIM, (int)dim.getWidth() / RIDIM);
        gbc.anchor = GridBagConstraints.FIRST_LINE_END;
        panel.add(speciaSlot, gbc);
    }

    private final void buildCardSlot(final JPanel panel, final Dimension dim) {
        final JPanel cardSlot = new JPanel(new GridLayout(1, NUM_CARD_SLOT));
        GridBagConstraints gbc = new GridBagConstraints();

        for (int i = 0; i < NUM_CARD_SLOT; i++) {
            final JButton card = new JButton();
            try {
                final Image img = ImageIO.read(getClass().getResource("/TWOHEARTS.png"));
                card.setIcon(new ImageIcon(img));
                cardSlot.add(card);
            } catch (IOException e) {
                throw new ExceptionInInitializerError(e);
            }
        }
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 0.2;
        gbc.weighty = 0.2;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(0, RIDIM, RIDIM, RIDIM);
        gbc.anchor = GridBagConstraints.CENTER;
        panel.add(cardSlot, gbc);
    }

    private final void buildHandSlot(final JPanel panel, final Dimension dim) {
        final JPanel handSlot = new JPanel(new GridLayout(1, NUM_HAND_SLOT));
        GridBagConstraints gbc = new GridBagConstraints();

        for (int i = 0; i < NUM_HAND_SLOT; i++) {
            final JButton card = new JButton();
            try {
                final Image img = ImageIO.read(getClass().getResource("/TWOHEARTS.png"));
                card.setIcon(new ImageIcon(img));
                handSlot.add(card);
            } catch (IOException e) {
                throw new ExceptionInInitializerError(e);
            }
        }
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 0.2;
        gbc.weighty = 0.2;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(0, RIDIM, RIDIM, RIDIM);
        gbc.anchor = GridBagConstraints.PAGE_END;
        panel.add(handSlot, gbc);
    }
}
